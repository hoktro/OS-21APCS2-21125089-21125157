diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..edcc6ce
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,19 @@
+{
+    "configurations": [
+        {
+            "name": "Mac",
+            "includePath": [
+                "${default}",
+                "${workspaceFolder}"
+            ],
+            "defines": [],
+            "macFrameworkPath": [
+                "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks"
+            ],
+            "cStandard": "c17",
+            "cppStandard": "c++17",
+            "intelliSenseMode": "macos-clang-arm64"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..143541e
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "param.h": "c",
+        "stat.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/21125089_21125157.patch b/21125089_21125157.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 365c91b..4f3fd54 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 
 
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..b7c5a0d
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,94 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char* fmtname( char* path ) {
+
+    static char buf[DIRSIZ + 1]; // Each name has fixed size
+    char *pointer;
+
+    pointer = path + strlen( path );
+    while( pointer >= path && *pointer != '/' ) --pointer;
+    ++pointer; // The popsition starting the name of file
+
+    if( strlen(pointer) >= DIRSIZ ) return pointer;
+    memmove( buf, pointer, strlen(pointer) );
+    memset( buf + strlen(pointer), ' ', DIRSIZ - strlen(pointer) ); // Blank-padding
+    return buf;
+}
+
+void diving( char *path, char *fname ) {
+    
+    char buf[512], *pointer;
+    int fd;
+    struct dirent de;
+    struct stat st;
+
+    if( ( fd = open( path, O_RDONLY ) ) < 0 ) {
+        fprintf( 2, "Cannot open %s\n", path );
+        return;
+    }
+
+    if( fstat( fd, &st ) < 0 ) {
+        fprintf( 2, "Cannot stat %s\n", path );
+        close(fd);
+        return;
+    }
+
+    if( st.type != T_DIR ) {
+        fprintf( 2, "Usage: find <DIRECTORY> <FILENAME>\n");
+        close(fd);
+        return;
+    }
+
+    if( strlen(path) + 1 + DIRSIZ + 1 > sizeof buf ) {
+        printf("Path too long\n");
+        close(fd);
+        return;
+    }
+
+    strcpy( buf, path );
+    pointer = buf + strlen(buf);
+    *pointer++ = '/';
+
+    while( read( fd, &de, sizeof(de) ) == sizeof(de) ) {
+        if( !de.inum ) continue;
+        memmove( pointer, de.name, DIRSIZ );
+        pointer[DIRSIZ] = 0;
+        if( stat( buf, &st ) < 0 ) {
+            printf("Cannot stat %s\n", buf );
+            continue;
+        }
+
+        char *name = fmtname(buf);
+        if( st.type == T_DEVICE ) continue;
+        if( st.type == T_DIR ) {
+            if( name[0] == '.' ) continue;
+            diving( buf, fname );
+            continue;
+        }
+        if( !strcmp( name, fname ) ) printf( "%s\n", buf );
+    }
+
+    close(fd);
+}
+
+int main( int argc, char *argv[] ) {
+    
+    if( argc != 3 ) {
+        fprintf( 2, "Usage: find\n" );
+        exit(1);
+    }
+
+    char *path = argv[1];
+    char fname[DIRSIZ];
+
+    memmove( fname, argv[2], strlen( argv[2] ) );
+    memset( fname + strlen(argv[2]), ' ', DIRSIZ - strlen(argv[2]) );
+
+    diving( path, fname );
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..1251439
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,32 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main()
+{
+    int pc[2], cp[2];
+    pipe(pc);
+    pipe(cp);
+    char *ping = "ping";
+    char *pong = "pong";
+    char buf[512] = {0};
+    int child_id = fork();
+    if (child_id != 0)
+    {
+        close(pc[0]);
+        close(cp[1]);
+        write(pc[1], ping, strlen(ping));
+        read(cp[0], buf, sizeof(buf));
+        printf("%d: received %s\n", getpid(), buf);
+        exit(0);
+    }
+    else
+    {
+        close(pc[1]);
+        close(cp[0]);
+        read(pc[0], buf, sizeof(buf));
+        printf("%d: received %s\n", getpid(), buf);
+        write(cp[1], pong, strlen(pong));
+        exit(0);
+    }
+}
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..25d7b0d
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,47 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void recursive( int *p ) {
+    
+    close(p[1]);
+
+    int prime;
+    if( read( p[0], &prime, 4 ) <= 0 ) exit(0);
+    fprintf( 1, "prime %d\n", prime );
+
+    int _p[2];
+    pipe(_p);
+
+    if( !fork() ) recursive(_p);
+    int num;
+    while( read( p[0], &num, 4 ) == 4 ) if( num % prime ) write( _p[1], &num, 4 );
+    
+    close(p[0]);
+
+    close(_p[0]);
+    close(_p[1]);
+
+    wait(0);
+    exit(0);
+}
+
+int main( int argc, char *argv[] ) {
+    
+    if( argc != 1 ) {
+        fprintf( 2, "Usage: primes" );
+        exit(1);
+    }
+
+    int p[2];
+    pipe(p);
+
+    for( int i = 2; i <= 35; ++i ) write( p[1], &i, sizeof(i) );
+
+    if( !fork() ) recursive(p);
+
+    close(p[0]);
+    close(p[1]);
+    wait(0);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..9c90a2b
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,14 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char *argv[])
+{
+    if (argc != 2)
+    {
+        fprintf(2, "Usage: sleep sec\n\n");
+        exit(1);
+    }
+    int sec = atoi(argv[1]);
+    sleep( sec * 10 );
+    exit(0);
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..f982f34
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,52 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user/user.h"
+
+int readConsole( char **args, int index ) {
+    
+    char buf[512];
+    int idx = 0, nail = 0;
+
+    while( read( 0, buf + idx, 1 ) == 1 ) {
+        if( buf[idx] == '\n' ) {
+            buf[idx] = 0;
+            if( buf[idx - 1] ) args[index++] = buf + nail;
+            return idx;
+        }
+
+        if( buf[idx] == ' ' ) {
+            buf[idx] = 0;
+            if( buf[idx - 1] ) args[index++] = buf + nail;
+        }
+        else if( !buf[idx - 1] ) nail = idx;
+
+        ++idx;
+    }
+
+    buf[idx] = 0;
+    if( buf[idx - 1] ) args[index++] = buf + nail;
+
+    return idx;
+}
+
+int main( int argc, char *argv[] ) {
+    
+    if( argc < 2 ) {
+        fprintf( 2, "Usage: <cmd> | xargs <cmd>\n" );
+        exit(1);
+    }
+
+    char *cmd = argv[1], *args[MAXARG];
+
+    for( int i = 0; i < argc; ++i ) args[i] = argv[i + 1];
+    while( readConsole( args, argc - 1 ) ) {
+        if( !fork() ) {
+            exec( cmd, args );
+            fprintf( 2, "Exec error\n" );
+            exit(1);
+        }
+        wait(0);
+    }
+
+    exit(0);
+}
\ No newline at end of file
